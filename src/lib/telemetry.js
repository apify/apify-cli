const Mixpanel = require('mixpanel');
const loadJson = require('load-json-file');
const writeJson = require('write-json-file');
const { cryptoRandomObjectId } = require('@apify/utilities');
const { MIXPANEL_TOKEN, TELEMETRY_FILE_PATH } = require('./consts');
const { detectInstallationType } = require('./version_check');
const outputs = require('./outputs');
const { getLocalUserInfo } = require('./utils');

const mixpanel = Mixpanel.init(MIXPANEL_TOKEN, { keepAlive: false });
const TELEMETRY_WARNING_TEXT = 'Apify collects telemetry data about general usage of CLI to help us improve the product. '
    + 'This feature is enable by default and you can disable it by setting "APIFY_CLI_DISABLE_TELEMETRY" environment variable. '
    + 'You can find more about telemetry in https://docs.apify.com/cli/docs/telemetry.';

/**
 * Returns distinctId for current local environment.
 * Use CLI prefix to distinguish between id generated by CLI.
 *
 * @returns {string}
 */
const createLocalDistinctId = () => `CLI:${cryptoRandomObjectId()}`;

/**
 * Returns telemetry distinctId for current local environment or creates new one.
 *
 * @returns {string}
 */
const getOrCreateLocalDistinctId = () => {
    try {
        const telemetry = loadJson.sync(TELEMETRY_FILE_PATH);
        return telemetry.distinctId;
    } catch (e) {
        const userInfo = getLocalUserInfo();
        const distinctId = userInfo.id || createLocalDistinctId();
        // This first time we are tracking telemetry, so we want to notify user about it.
        outputs.info(TELEMETRY_WARNING_TEXT);
        writeJson.sync(TELEMETRY_FILE_PATH, { distinctId });
        return distinctId;
    }
};

const regenerateLocalDistinctId = () => {
    try {
        writeJson.sync(TELEMETRY_FILE_PATH, { distinctId: createLocalDistinctId() });
    } catch (e) {
        // Ignore errors
    }
};

const isTelemetryEnabled = !process.env.APIFY_CLI_DISABLE_TELEMETRY
    || ['false', '0'].includes(process.env.APIFY_CLI_DISABLE_TELEMETRY);

/**
 * Tracks telemetry event if telemetry is enabled.
 *
 * @param eventName
 * @param eventData
 * @param distinctId
 */
const maybeTrackTelemetry = ({ eventName, eventData, distinctId }) => {
    if (!isTelemetryEnabled) return;
    try {
        if (!distinctId) distinctId = getOrCreateLocalDistinctId();
        // NOTE: We don't use callback here, because we don't want to wait for Mixpanel to finish.
        mixpanel.track(eventName, {
            distinct_id: distinctId,
            $os: process.platform,
            metadata: {
                installationType: detectInstallationType(),
            },
            ...eventData,
        }, () => { /* Ignore errors */ });
    } catch (e) {
        // Ignore errors
    }
};

/**
 * Uses Apify identity with local distinctId.
 *
 * @param userId
 * @returns {Promise<void>}
 */
const useApifyIdentity = async (userId) => {
    if (!isTelemetryEnabled) return;
    try {
        maybeTrackTelemetry({
            eventName: 'cli_use_apify_identity',
            eventData: {
                userId,
            },
        });
        writeJson.sync(TELEMETRY_FILE_PATH, { distinctId: userId });
    } catch (e) {
        // Ignore errors
    }
};

module.exports = {
    mixpanel,
    getOrCreateLocalDistinctId,
    isTelemetryEnabled,
    maybeTrackTelemetry,
    useApifyIdentity,
    regenerateLocalDistinctId,
};
